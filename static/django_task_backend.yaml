openapi: 3.0.3
info:
  title: Django Task Backend - OpenAPI 3.0
  version: 1.0.0
  description: Swagger docs for django task backend
  
servers:
  - url: http://{host}:{port}/api/v1
    description: Development sever
    variables:
      host:
        default: localhost
      port:
        default: '8000'
paths:
  /users/login:
    summary: users authentication
    description: allows any registered user to authenticate for getting JWT
    post:
      operationId: login
      requestBody:
        description: The user to log in.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                response:
                  value: >-
                    {"response":{"access_token":"238798ye2e3e97823",
                    "refresh_token": "hj2e23y9848722872308234"}}
        "404":
          description: Not found
          content:
            application/json:
              examples:
                response:
                  value: >-
                    {"response": "wrong user or password"}
        
      tags:
        - Users
  /users/signup:
    summary: Allows to register users
    post:
      summary: allows to register users
      description: ''
      operationId: signup
      requestBody:
        description: The user to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        default:
          description: Response
          content:
            application/json:
              examples:
                response:
                  value: '{"response": "user_created"}'
      tags:
        - Users

  /users/refresh-token:
    post:
      summary: refresh the current JWT
      requestBody:
        description: refresh token sent in body.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
         
      responses: 

        '200':
          description: success
          content:
            application/json:
              examples:
                response:
                  value: '{"response": {"new_access_token": 12381082321083821}}'
      tags:
       - Users
        
  /users/{user_id}/tasks:
    summary: get all users asociated tasks
    get:
      security:
       - bearerAuth: []
      summary: retrieves all tasks for an user
      description: ''
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                tasks:
                  value: >-
                    {"tasks": [{"title": "new title 3", "description": "my new
                    description 3"}, {"title": "my new title xxxxxx",
                    "description": "this is a test task called xxxxxxxxxx"}]}
      tags:
        - Tasks
    
    post:
      security:
         - bearerAuth: []
      summary: allows to create new tasks
      description: ''
      requestBody:
        description: The task to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
              properties:
                title:
                  type: string
                description:
                  type: string
      
      parameters:
       - in: path
         name: user_id     
         required: true
         schema:
          type: string

      
      responses:
        "201":
          description: Created
          content:
            application/json:
              examples:
                response:
                  value: '{"response": {"id": 1, "message": "created"}}'
        "401":
          description: Not Authorized
          content:
            application/json:
              examples:
                response:
                  value: {"response": "not authorized"}
      tags:
        - Tasks 
        
        
  /users/{user_id}/tasks/{task_id}:
    summary: get all users asociated tasks
    get:
      security:
       - bearerAuth: []
      summary: retrieves all tasks for an user
      description: ''
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                tasks:
                  value: >-
                    {"tasks": [{"title": "new title 3", "description": "my new
                    description 3"}, {"title": "my new title xxxxxx",
                    "description": "this is a test task called xxxxxxxxxx"}]}
      tags:
        - Tasks
  
     
        
        
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT